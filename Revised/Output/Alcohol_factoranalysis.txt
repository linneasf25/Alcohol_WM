> 
> #------------------------------------------------------------
> # Packages
> #------------------------------------------------------------
> install.packages("cli") 
Error in install.packages : Updating loaded packages
> library(psych)
> library(dplyr)
> library(tidyr)
> library(ggplot2)
> library(ggpubr)
> 
> 
> # Packages for CFA
> library(lavaan)
> library(semPlot)
> 
> 
> #----------------------------------------------------------------------------------------
> #  Load in Data
> #-----------------------------------------------------------------------------------------
> df <- read.csv("newfactor_cluster.csv")
> 
> typeof(df$Total_Drinks_7days)
[1] "integer"
> typeof(df$Num_Days_Drank_7days)
[1] "integer"
> 
> 
> df$DrinksTypicalDay[is.na(df$DrinksTypicalDay)] <- 0
Error in `$<-.data.frame`(`*tmp*`, DrinksTypicalDay, value = numeric(0)) : 
  replacement has 0 rows, data has 436
> install.packages("cli")
Installing package into ‘/Users/linnea/Library/R/x86_64/4.2/library’
(as ‘lib’ is unspecified)
trying URL 'https://cran.rstudio.com/bin/macosx/contrib/4.2/cli_3.6.0.tgz'
Content type 'application/x-gzip' length 1329603 bytes (1.3 MB)
==================================================
downloaded 1.3 MB


The downloaded binary packages are in
	/var/folders/gd/w5h7h6jx0svfkqcrrfzkxz940000gr/T//RtmpRAsjfv/downloaded_packages
> df <- read.csv("newfactor_cluster.csv")
> 
> typeof(df$Total_Drinks_7days)
[1] "integer"
> typeof(df$Num_Days_Drank_7days)
[1] "integer"
> 
> 
> df$DrinksTypicalDay[is.na(df$DrinksTypicalDay)] <- 0
Error in `$<-.data.frame`(`*tmp*`, DrinksTypicalDay, value = numeric(0)) : 
  replacement has 0 rows, data has 436
> df[ , c(2:8)] <- df[ , c(2:8)] %>% scale()
> #------------------------------------------------------------
> #  CFA script
> #------------------------------------------------------------
> 
> # Create text string describing model
> ### Look at lavaan sytax for more info "=~" denotes what are indicators of what factor
> ### Below syntax can be read: the "SUD" factor (SUD is abitrary label) is measured by all 5 symptom counts
> 
> Freq_mod <- 'Freq =~ Total_Drinks_7days + days5drinks_last12 + daysdrunk_last12 + daysany_last12'
> 
> correlation = cor(df[,2:6], method = "spearman") %>% round(2)
> 
> # Run CFA model
> Freq_fit <- cfa(Freq_mod , # model to be run (text file)
+                data= df, # data 
+                estimator = "MLR", # Robust ML estimator for skewed data (like symptom counts)
+                std.lv = T,# asks for standardized parameters (most common CFA presentation)
+                cluster = "twpair") 
> varTable(Freq_fit)
                name idx nobs    type exo user mean var nlev lnam
1 Total_Drinks_7days   2  436 numeric   0    0    0   1    0     
2 days5drinks_last12   6  436 numeric   0    0    0   1    0     
3   daysdrunk_last12   7  436 numeric   0    0    0   1    0     
4     daysany_last12   8  436 numeric   0    0    0   1    0     
> 
> # Plot model
> semPaths(Freq_fit, # CFA model
+          title = F, 
+          what = "std", # print standardized factor loadings
+          intercepts = F, 
+          residuals = F, 
+          layout = "tree2", # layout of figures
+          edge.label.cex = .8)
> 
> # Note: CFI is the Comparative Fit Index – values can range between 0 and 1 (values greater than 0.90, conservatively 0.95 indicate good fit)
> #CFA Summary 
> ## it changed to be .774 instead of .773 when I took out typical drinks  
> ### Provides ALOT of information
> summary(Freq_fit, 
+         standardized= TRUE, # standardize parameters
+         fit.measure = TRUE) # fit measures in 
lavaan 0.6.14 ended normally after 14 iterations

  Estimator                                         ML
  Optimization method                           NLMINB
  Number of model parameters                        12

  Number of observations                           436
  Number of clusters [twpair]                      218

Model Test User Model:
                                              Standard      Scaled
  Test Statistic                                 9.031       2.860
  Degrees of freedom                                 2           2
  P-value (Chi-square)                           0.011       0.239
  Scaling correction factor                                  3.158
    Yuan-Bentler correction (Mplus variant)                       

Model Test Baseline Model:

  Test statistic                               785.792     265.216
  Degrees of freedom                                 6           6
  P-value                                        0.000       0.000
  Scaling correction factor                                  2.963

User Model versus Baseline Model:

  Comparative Fit Index (CFI)                    0.991       0.997
  Tucker-Lewis Index (TLI)                       0.973       0.990
                                                                  
  Robust Comparative Fit Index (CFI)                         0.996
  Robust Tucker-Lewis Index (TLI)                            0.989

Loglikelihood and Information Criteria:

  Loglikelihood user model (H0)              -2084.246   -2084.246
  Scaling correction factor                                  4.101
      for the MLR correction                                      
  Loglikelihood unrestricted model (H1)      -2079.730   -2079.730
  Scaling correction factor                                  3.967
      for the MLR correction                                      
                                                                  
  Akaike (AIC)                                4192.492    4192.492
  Bayesian (BIC)                              4241.423    4241.423
  Sample-size adjusted Bayesian (SABIC)       4203.341    4203.341

Root Mean Square Error of Approximation:

  RMSEA                                          0.090       0.031
  90 Percent confidence interval - lower         0.037       0.000
  90 Percent confidence interval - upper         0.153       0.074
  P-value H_0: RMSEA <= 0.050                    0.099       0.719
  P-value H_0: RMSEA >= 0.080                    0.674       0.026
                                                                  
  Robust RMSEA                                               0.056
  90 Percent confidence interval - lower                     0.000
  90 Percent confidence interval - upper                     0.187
  P-value H_0: Robust RMSEA <= 0.050                         0.351
  P-value H_0: Robust RMSEA >= 0.080                         0.498

Standardized Root Mean Square Residual:

  SRMR                                           0.016       0.016

Parameter Estimates:

  Standard errors                        Robust.cluster
  Information                                  Observed
  Observed information based on                 Hessian

Latent Variables:
                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all
  Freq =~                                                               
    Ttl_Drnks_7dys    0.703    0.118    5.964    0.000    0.703    0.704
    dys5drnks_ls12    0.853    0.091    9.381    0.000    0.853    0.854
    daysdrnk_lst12    0.754    0.109    6.900    0.000    0.754    0.755
    daysany_last12    0.790    0.066   12.018    0.000    0.790    0.791

Intercepts:
                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all
   .Ttl_Drnks_7dys    0.000    0.061    0.000    1.000    0.000    0.000
   .dys5drnks_ls12   -0.000    0.061   -0.000    1.000   -0.000   -0.000
   .daysdrnk_lst12    0.000    0.059    0.000    1.000    0.000    0.000
   .daysany_last12    0.000    0.057    0.000    1.000    0.000    0.000
    Freq              0.000                               0.000    0.000

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)   Std.lv  Std.all
   .Ttl_Drnks_7dys    0.503    0.092    5.451    0.000    0.503    0.504
   .dys5drnks_ls12    0.269    0.064    4.217    0.000    0.269    0.270
   .daysdrnk_lst12    0.430    0.097    4.417    0.000    0.430    0.431
   .daysany_last12    0.373    0.069    5.439    0.000    0.373    0.374
    Freq              1.000                               1.000    1.000

> 
> 
> # Pull out fitmeasures you want
> ## create list of stats to pull out
> fit.stats <- c("npar", # number of parameters
+                "chisq.scaled", # chi-square stat
+                "df.scaled", # chi degrees of freedom
+                "pvalue.scaled", # chi squared p-value
+                "cfi.robust", 
+                "BIC", 
+                "rmsea.robust") 
> 
> # look at fit statistics
> fitmeasures(Freq_fit,
+             fit.measures = fit.stats)
         npar  chisq.scaled     df.scaled pvalue.scaled    cfi.robust           bic  rmsea.robust 
       12.000         2.860         2.000         0.239         0.996      4241.423         0.056 
> 
> 
> 
> mod_ind <- modificationindices(Freq_fit)
> head(mod_ind[order(mod_ind$mi, decreasing = T),], 20) # computes MI and ranks sources of misfit
                  lhs op                rhs    mi    epc sepc.lv sepc.all sepc.nox
17 Total_Drinks_7days ~~     daysany_last12 9.358  0.094   0.094    0.217    0.217
18 days5drinks_last12 ~~   daysdrunk_last12 9.358  0.109   0.109    0.320    0.320
16 Total_Drinks_7days ~~   daysdrunk_last12 2.841 -0.051  -0.051   -0.110   -0.110
19 days5drinks_last12 ~~     daysany_last12 2.841 -0.065  -0.065   -0.204   -0.204
15 Total_Drinks_7days ~~ days5drinks_last12 1.958 -0.046  -0.046   -0.124   -0.124
20   daysdrunk_last12 ~~     daysany_last12 1.958 -0.045  -0.045   -0.113   -0.113
> # results show residual relationship between Sed_Sx and Op_Sx is largest source of misfit
> ## model already fits well so no additional changes are needed based on MI
> 
> 
> #
> Fscores  <- lavPredict(Freq_fit , 
+                        type = "lv", # standardized fscores
+                        method = "EBM") %>%  # how to calculate scores, look at lavaan manual for what method is best for your model
+   as.data.frame()
> 
> df1 <- cbind(df, Fscores)
> 
> #------------------------------------------------------------
> #  Pulling out paramaters you want (many time to make tables)
> #------------------------------------------------------------
> # lavInspect "pulls" out the elements you specify
> 
> # this pulls out standardized parameters
> lavInspect(Freq_fit,
+            what = "std")
$lambda
                    Freq
Total_Drinks_7days 0.704
days5drinks_last12 0.854
daysdrunk_last12   0.755
daysany_last12     0.791

$theta
                   Tt_D_7 dy5_12 dysd_12 dysn_12
Total_Drinks_7days  0.504                       
days5drinks_last12  0.000  0.270                
daysdrunk_last12    0.000  0.000   0.431        
daysany_last12      0.000  0.000   0.000   0.374

$psi
     Freq
Freq    1

$nu
                   intrcp
Total_Drinks_7days      0
days5drinks_last12      0
daysdrunk_last12        0
daysany_last12          0

$alpha
     intrcp
Freq      0

> 
> # this pulls out standardized factor loadings specifically
> lavInspect(Freq_fit,
+            what = "std")$lambda
                    Freq
Total_Drinks_7days 0.704
days5drinks_last12 0.854
daysdrunk_last12   0.755
daysany_last12     0.791
> 
> 
> write.csv(df1,"Updated_alc_variables.csv", row.names = FALSE)
> 
